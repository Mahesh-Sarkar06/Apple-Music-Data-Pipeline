CREATE OR REPLACE LIVE TABLE gold.clean_album
(
  CONSTRAINT album_id EXPECT (album_id IS NOT NULL) ON VIOLATION DROP ROW,
  CONSTRAINT title EXPECT (title IS NOT NULL) ON VIOLATION DROP ROW,
  CONSTRAINT artist_id EXPECT (artist_id IS NOT NULL) ON VIOLATION DROP ROW
)
AS
SELECT *
FROM silver.trans_album;


CREATE OR REPLACE LIVE TABLE gold.clean_artist
(
  CONSTRAINT artist_id EXPECT (artist_id IS NOT NULL) ON VIOLATION DROP ROW,
  CONSTRAINT artist_name EXPECT (artist_name IS NOT NULL) ON VIOLATION DROP ROW
)
AS
SELECT *
FROM silver.trans_artist;


CREATE OR REPLACE LIVE TABLE gold.clean_customer
(
  CONSTRAINT customer_id EXPECT (customer_id IS NOT NULL) ON VIOLATION DROP ROW,
  CONSTRAINT first_name EXPECT (first_name IS NOT NULL) ON VIOLATION DROP ROW
)
AS
SELECT *
FROM silver.trans_customer;


CREATE OR REPLACE LIVE TABLE gold.clean_invoice_line
(
  CONSTRAINT invoice_line_id EXPECT (invoice_line_id IS NOT NULL) ON VIOLATION DROP ROW,
  CONSTRAINT invoice_id EXPECT (invoice_id IS NOT NULL) ON VIOLATION DROP ROW,
  CONSTRAINT quantity EXPECT (quantity > 0) ON VIOLATION DROP ROW,
  CONSTRAINT unit_price EXPECT (unit_price > 0) ON VIOLATION DROP ROW
)
AS
SELECT *
FROM silver.trans_invoice_line;


CREATE OR REPLACE LIVE TABLE gold.clean_invoice
(
  CONSTRAINT invoice_id EXPECT (invoice_id IS NOT NULL) ON VIOLATION DROP ROW,
  CONSTRAINT customer_id EXPECT (customer_id IS NOT NULL) ON VIOLATION DROP ROW,
  CONSTRAINT total EXPECT (total > 0) ON VIOLATION DROP ROW
)
AS
SELECT *
FROM silver.trans_invoice;


-- Revenue generated by customers
CREATE OR REPLACE VIEW gold.revenue_by_customer AS
SELECT
  cust.customer_id,
  cust.first_name,
  cust.last_name,
  SUM(inv.total) AS total_revenue
FROM gold.clean_customer cust
JOIN gold.clean_invoice inv
ON cust.customer_id = inv.customer_id
GROUP BY cust.customer_id, cust.first_name, cust.last_name;


-- Employee Support performance
CREATE OR REPLACE VIEW gold.support_performance AS
SELECT
  emp.employee_id,
  emp.first_name,
  emp.last_name,
  COUNT(DISTINCT cust.customer_id) AS customer_supported,
  SUM(inv.total) AS revenue_generated
FROM silver.trans_employee emp
JOIN gold.clean_customer cust
ON emp.employee_id = cust.support_rep_id
JOIN gold.clean_invoice inv
ON cust.customer_id = inv.customer_id
GROUP BY emp.employee_id, emp.first_name, emp.last_name;


-- Revenue by Genre
CREATE OR REPLACE VIEW gold.revenue_by_genre AS
SELECT
  gen.genre_name,
  SUM(invl.unit_price * invl.quantity) AS revenue
FROM gold.clean_invoice_line invl
JOIN silver.trans_track trk
ON invl.track_id = trk.track_id
JOIN silver.trans_genre gen
ON trk.playlist_id =  gen.genre_id
GROUP BY gen.genre_name;


-- High valued customers
CREATE OR REPLACE VIEW gold.high_value_customers AS
WITH ranked_customer AS
(
  SELECT
    customer_id,
    total_revenue,
    PERCENT_RANK() OVER (ORDER BY total_revenue DESC) AS spend_percentile
  FROM gold.revenue_by_customer
)
SELECT *
FROM ranked_customer
WHERE spend_percentile <= 0.10;